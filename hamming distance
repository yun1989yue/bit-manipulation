The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

M1: 
1) & 1 to x and y to obtain the last bit of each
2) xor x and y to obtain whether they are same or not
C:
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        res = 0
        while x!=0 or y != 0:
            if (x&1) ^ (y&1) == 1:
                res += 1
            x >>= 1
            y >>= 1
        return res
        
M2：recursion
C：
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        if x == 0 and y ==0: # recursion needs a point to stop
            return 0
        return self.hammingDistance(x>>1,y>>1)+((x&1)^(y&1)) # plus plays higher position than bit manipulation?without parenthesis for second expression, the ans is wrong
